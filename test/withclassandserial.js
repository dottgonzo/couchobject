"use strict";
var chai = require("chai");
var expect = chai.expect;
var CouchObj = require("../index");
var ClassAndSerial = { serial: "seffesgsrgr", class: "cllgr" };
var ObjwithConf = new CouchObj(ClassAndSerial);
describe("test new object with class and serial", function () {
    describe("basic test existence", function () {
        it("expect no errors", function () {
            expect(ObjwithConf).to.be.ok;
        });
        it("expect an object", function () {
            expect(ObjwithConf).to.be.an("Object");
        });
    });
    describe("properties", function () {
        it("expect createdAt as number", function () {
            expect(ObjwithConf).to.have.property("createdAt").that.is.a("number");
        });
        it("expect updatedAt as number", function () {
            expect(ObjwithConf).to.have.property("updatedAt").that.is.a("number");
        });
        it("expect _id as string", function () {
            expect(ObjwithConf).to.have.property("_id").that.is.a("string");
        });
    });
    describe("corrispondence for object with class and serial", function () {
        it("expect that class is " + ClassAndSerial.class, function () {
            expect(ObjwithConf).to.have.property("class").that.equal(ClassAndSerial.class);
        });
        it("expect that serial is " + ClassAndSerial.serial, function () {
            expect(ObjwithConf).to.have.property("serial").that.equal(ClassAndSerial.serial);
        });
    });
    describe("composition of _id", function () {
        it("expect that _id is composed of 4 word", function () {
            expect(ObjwithConf._id.split("_").length).that.equal(4);
        });
        it("expect that first word of _id is class", function () {
            expect(ObjwithConf._id.split("_")[0]).that.equal(ClassAndSerial.class);
        });
        it("expect that second word of _id is serial", function () {
            expect(ObjwithConf._id.split("_")[1]).that.equal(ClassAndSerial.serial);
        });
        it("expect that third word of _id is a number equal to createdAt", function () {
            expect(parseInt(ObjwithConf._id.split("_")[2])).that.is.a("number").that.equal(ObjwithConf.createdAt);
        });
        it("expect fourth word of _id is an uid", function () {
            expect(ObjwithConf._id.split("_")[3]).that.is.a("string");
        });
        it("expect fourth word of _id is an uid of 5 characters", function () {
            expect(ObjwithConf._id.split("_")[3].length).that.equal(5);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvd2l0aGNsYXNzYW5kc2VyaWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxJQUFZLElBQUksV0FBTSxNQUFNLENBQUMsQ0FBQTtBQUU3QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO0FBRXhCLElBQU8sUUFBUSxXQUFXLFVBQVUsQ0FBQyxDQUFDO0FBT3RDLElBQUksY0FBYyxHQUFHLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUE7QUFFOUQsSUFBSSxXQUFXLEdBQUcsSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7QUFLL0MsUUFBUSxDQUFDLHVDQUF1QyxFQUFFO0lBQzlDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRTtRQUU3QixFQUFFLENBQUMsa0JBQWtCLEVBQUU7WUFDbkIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLGtCQUFrQixFQUFFO1lBQ25CLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ0gsUUFBUSxDQUFDLFlBQVksRUFBRTtRQUduQixFQUFFLENBQUMsNEJBQTRCLEVBQUU7WUFDN0IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFFLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLDRCQUE0QixFQUFFO1lBQzdCLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxzQkFBc0IsRUFBRTtZQUN2QixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEUsQ0FBQyxDQUFDLENBQUM7SUFHUCxDQUFDLENBQUMsQ0FBQztJQUNILFFBQVEsQ0FBQyxpREFBaUQsRUFBRTtRQUd4RCxFQUFFLENBQUMsdUJBQXVCLEdBQUcsY0FBYyxDQUFDLEtBQUssRUFBRTtZQUMvQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkYsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsd0JBQXdCLEdBQUcsY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUNqRCxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckYsQ0FBQyxDQUFDLENBQUM7SUFHUCxDQUFDLENBQUMsQ0FBQztJQUNILFFBQVEsQ0FBQyxvQkFBb0IsRUFBRTtRQUUzQixFQUFFLENBQUMsdUNBQXVDLEVBQUU7WUFFeEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFNUQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsd0NBQXdDLEVBQUU7WUFFekMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFM0UsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsMENBQTBDLEVBQUU7WUFFM0MsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFNUUsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsOERBQThELEVBQUU7WUFFL0QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFMUcsQ0FBQyxDQUFDLENBQUM7UUFDSyxFQUFFLENBQUMscUNBQXFDLEVBQUU7WUFFOUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFOUQsQ0FBQyxDQUFDLENBQUM7UUFDWSxFQUFFLENBQUMscURBQXFELEVBQUU7WUFFckUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFL0QsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUtQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3Qvd2l0aGNsYXNzYW5kc2VyaWFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgKiBhcyBtb2NoYSBmcm9tIFwibW9jaGFcIjtcbmltcG9ydCAqIGFzIGNoYWkgZnJvbSBcImNoYWlcIjtcblxubGV0IGV4cGVjdCA9IGNoYWkuZXhwZWN0XG5cbmltcG9ydCBDb3VjaE9iaiA9IHJlcXVpcmUoXCIuLi9pbmRleFwiKTtcblxuXG5cblxuXG5cbmxldCBDbGFzc0FuZFNlcmlhbCA9IHsgc2VyaWFsOiBcInNlZmZlc2dzcmdyXCIsIGNsYXNzOiBcImNsbGdyXCIgfVxuXG5sZXQgT2Jqd2l0aENvbmYgPSBuZXcgQ291Y2hPYmooQ2xhc3NBbmRTZXJpYWwpO1xuXG5cblxuXG5kZXNjcmliZShcInRlc3QgbmV3IG9iamVjdCB3aXRoIGNsYXNzIGFuZCBzZXJpYWxcIiwgZnVuY3Rpb24oKSB7XG4gICAgZGVzY3JpYmUoXCJiYXNpYyB0ZXN0IGV4aXN0ZW5jZVwiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICBpdChcImV4cGVjdCBubyBlcnJvcnNcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYpLnRvLmJlLm9rO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJleHBlY3QgYW4gb2JqZWN0XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KE9iandpdGhDb25mKS50by5iZS5hbihcIk9iamVjdFwiKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoXCJwcm9wZXJ0aWVzXCIsIGZ1bmN0aW9uKCkge1xuXG5cbiAgICAgICAgaXQoXCJleHBlY3QgY3JlYXRlZEF0IGFzIG51bWJlclwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZikudG8uaGF2ZS5wcm9wZXJ0eShcImNyZWF0ZWRBdFwiKS50aGF0LmlzLmEoXCJudW1iZXJcIik7XG4gICAgICAgIH0pO1xuICAgICAgICBpdChcImV4cGVjdCB1cGRhdGVkQXQgYXMgbnVtYmVyXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KE9iandpdGhDb25mKS50by5oYXZlLnByb3BlcnR5KFwidXBkYXRlZEF0XCIpLnRoYXQuaXMuYShcIm51bWJlclwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KFwiZXhwZWN0IF9pZCBhcyBzdHJpbmdcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYpLnRvLmhhdmUucHJvcGVydHkoXCJfaWRcIikudGhhdC5pcy5hKFwic3RyaW5nXCIpO1xuICAgICAgICB9KTtcblxuXG4gICAgfSk7XG4gICAgZGVzY3JpYmUoXCJjb3JyaXNwb25kZW5jZSBmb3Igb2JqZWN0IHdpdGggY2xhc3MgYW5kIHNlcmlhbFwiLCBmdW5jdGlvbigpIHtcblxuXG4gICAgICAgIGl0KFwiZXhwZWN0IHRoYXQgY2xhc3MgaXMgXCIgKyBDbGFzc0FuZFNlcmlhbC5jbGFzcywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYpLnRvLmhhdmUucHJvcGVydHkoXCJjbGFzc1wiKS50aGF0LmVxdWFsKENsYXNzQW5kU2VyaWFsLmNsYXNzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KFwiZXhwZWN0IHRoYXQgc2VyaWFsIGlzIFwiICsgQ2xhc3NBbmRTZXJpYWwuc2VyaWFsLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZikudG8uaGF2ZS5wcm9wZXJ0eShcInNlcmlhbFwiKS50aGF0LmVxdWFsKENsYXNzQW5kU2VyaWFsLnNlcmlhbCk7XG4gICAgICAgIH0pO1xuXG5cbiAgICB9KTtcbiAgICBkZXNjcmliZShcImNvbXBvc2l0aW9uIG9mIF9pZFwiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICBpdChcImV4cGVjdCB0aGF0IF9pZCBpcyBjb21wb3NlZCBvZiA0IHdvcmRcIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZi5faWQuc3BsaXQoXCJfXCIpLmxlbmd0aCkudGhhdC5lcXVhbCg0KTtcblxuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImV4cGVjdCB0aGF0IGZpcnN0IHdvcmQgb2YgX2lkIGlzIGNsYXNzXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYuX2lkLnNwbGl0KFwiX1wiKVswXSkudGhhdC5lcXVhbChDbGFzc0FuZFNlcmlhbC5jbGFzcyk7XG5cbiAgICAgICAgfSk7XG4gICAgICAgIGl0KFwiZXhwZWN0IHRoYXQgc2Vjb25kIHdvcmQgb2YgX2lkIGlzIHNlcmlhbFwiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgZXhwZWN0KE9iandpdGhDb25mLl9pZC5zcGxpdChcIl9cIilbMV0pLnRoYXQuZXF1YWwoQ2xhc3NBbmRTZXJpYWwuc2VyaWFsKTtcblxuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJleHBlY3QgdGhhdCB0aGlyZCB3b3JkIG9mIF9pZCBpcyBhIG51bWJlciBlcXVhbCB0byBjcmVhdGVkQXRcIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIGV4cGVjdChwYXJzZUludChPYmp3aXRoQ29uZi5faWQuc3BsaXQoXCJfXCIpWzJdKSkudGhhdC5pcy5hKFwibnVtYmVyXCIpLnRoYXQuZXF1YWwoT2Jqd2l0aENvbmYuY3JlYXRlZEF0KTtcblxuICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpdChcImV4cGVjdCBmb3VydGggd29yZCBvZiBfaWQgaXMgYW4gdWlkXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYuX2lkLnNwbGl0KFwiX1wiKVszXSkudGhhdC5pcy5hKFwic3RyaW5nXCIpO1xuXG4gICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICBpdChcImV4cGVjdCBmb3VydGggd29yZCBvZiBfaWQgaXMgYW4gdWlkIG9mIDUgY2hhcmFjdGVyc1wiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgZXhwZWN0KE9iandpdGhDb25mLl9pZC5zcGxpdChcIl9cIilbM10ubGVuZ3RoKS50aGF0LmVxdWFsKDUpO1xuXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG5cblxuXG59KTsiXX0=
