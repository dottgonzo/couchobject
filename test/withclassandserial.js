"use strict";
const chai = require("chai");
let expect = chai.expect;
const index_1 = require("../index");
const ClassAndSerial = { serial: "seffesgsrgr", class: "cllgr" };
const ObjwithConf = index_1.default(ClassAndSerial);
describe("test new object with class and serial", function () {
    describe("basic test existence", function () {
        it("expect no errors", function () {
            expect(ObjwithConf).to.be.ok;
        });
        it("expect an object", function () {
            expect(ObjwithConf).to.be.an("Object");
        });
    });
    describe("properties", function () {
        it("expect createdAt as number", function () {
            expect(ObjwithConf).to.have.property("createdAt").that.is.a("number");
        });
        it("expect updatedAt as number", function () {
            expect(ObjwithConf).to.have.property("updatedAt").that.is.a("number");
        });
        it("expect _id as string", function () {
            expect(ObjwithConf).to.have.property("_id").that.is.a("string");
        });
    });
    describe("corrispondence for object with class and serial", function () {
        it("expect that class is " + ClassAndSerial.class, function () {
            expect(ObjwithConf).to.have.property("class").that.equal(ClassAndSerial.class);
        });
        it("expect that serial is " + ClassAndSerial.serial, function () {
            expect(ObjwithConf).to.have.property("serial").that.equal(ClassAndSerial.serial);
        });
    });
    describe("composition of _id", function () {
        it("expect that _id is composed of 4 word", function () {
            expect(ObjwithConf._id.split("_").length).that.equal(4);
        });
        it("expect that first word of _id is class", function () {
            expect(ObjwithConf._id.split("_")[0]).that.equal(ClassAndSerial.class);
        });
        it("expect that second word of _id is serial", function () {
            expect(ObjwithConf._id.split("_")[1]).that.equal(ClassAndSerial.serial);
        });
        it("expect that third word of _id is a number equal to createdAt", function () {
            expect(parseInt(ObjwithConf._id.split("_")[2])).that.is.a("number").that.equal(ObjwithConf.createdAt);
        });
        it("expect fourth word of _id is an uid", function () {
            expect(ObjwithConf._id.split("_")[3]).that.is.a("string");
        });
        it("expect fourth word of _id is an uid of 5 characters", function () {
            expect(ObjwithConf._id.split("_")[3].length).that.equal(6);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvd2l0aGNsYXNzYW5kc2VyaWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxNQUFZLElBQUksV0FBTSxNQUFNLENBQUMsQ0FBQTtBQUU3QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO0FBRXhCLHdCQUFxQixVQUFVLENBQUMsQ0FBQTtBQUloQyxNQUFNLGNBQWMsR0FBRyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFBO0FBRWhFLE1BQU0sV0FBVyxHQUFHLGVBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUs3QyxRQUFRLENBQUMsdUNBQXVDLEVBQUU7SUFDOUMsUUFBUSxDQUFDLHNCQUFzQixFQUFFO1FBRTdCLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRTtZQUNuQixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsa0JBQWtCLEVBQUU7WUFDbkIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDSCxRQUFRLENBQUMsWUFBWSxFQUFFO1FBR25CLEVBQUUsQ0FBQyw0QkFBNEIsRUFBRTtZQUM3QixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUUsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsNEJBQTRCLEVBQUU7WUFDN0IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFFLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLHNCQUFzQixFQUFFO1lBQ3ZCLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwRSxDQUFDLENBQUMsQ0FBQztJQUdQLENBQUMsQ0FBQyxDQUFDO0lBQ0gsUUFBUSxDQUFDLGlEQUFpRCxFQUFFO1FBR3hELEVBQUUsQ0FBQyx1QkFBdUIsR0FBRyxjQUFjLENBQUMsS0FBSyxFQUFFO1lBQy9DLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRixDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyx3QkFBd0IsR0FBRyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ2pELE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyRixDQUFDLENBQUMsQ0FBQztJQUdQLENBQUMsQ0FBQyxDQUFDO0lBQ0gsUUFBUSxDQUFDLG9CQUFvQixFQUFFO1FBRTNCLEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRTtZQUV4QyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU1RCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx3Q0FBd0MsRUFBRTtZQUV6QyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUzRSxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQywwQ0FBMEMsRUFBRTtZQUUzQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU1RSxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyw4REFBOEQsRUFBRTtZQUUvRCxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUUxRyxDQUFDLENBQUMsQ0FBQztRQUNLLEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRTtZQUU5QyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU5RCxDQUFDLENBQUMsQ0FBQztRQUNZLEVBQUUsQ0FBQyxxREFBcUQsRUFBRTtZQUVyRSxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUvRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBS1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC93aXRoY2xhc3NhbmRzZXJpYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCAqIGFzIG1vY2hhIGZyb20gXCJtb2NoYVwiO1xuaW1wb3J0ICogYXMgY2hhaSBmcm9tIFwiY2hhaVwiO1xuXG5sZXQgZXhwZWN0ID0gY2hhaS5leHBlY3RcblxuaW1wb3J0IENvdWNoT2JqIGZyb20gXCIuLi9pbmRleFwiO1xuXG5cblxuY29uc3QgQ2xhc3NBbmRTZXJpYWwgPSB7IHNlcmlhbDogXCJzZWZmZXNnc3JnclwiLCBjbGFzczogXCJjbGxnclwiIH1cblxuY29uc3QgT2Jqd2l0aENvbmYgPSBDb3VjaE9iaihDbGFzc0FuZFNlcmlhbCk7XG5cblxuXG5cbmRlc2NyaWJlKFwidGVzdCBuZXcgb2JqZWN0IHdpdGggY2xhc3MgYW5kIHNlcmlhbFwiLCBmdW5jdGlvbigpIHtcbiAgICBkZXNjcmliZShcImJhc2ljIHRlc3QgZXhpc3RlbmNlXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGl0KFwiZXhwZWN0IG5vIGVycm9yc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZikudG8uYmUub2s7XG4gICAgICAgIH0pO1xuICAgICAgICBpdChcImV4cGVjdCBhbiBvYmplY3RcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYpLnRvLmJlLmFuKFwiT2JqZWN0XCIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZShcInByb3BlcnRpZXNcIiwgZnVuY3Rpb24oKSB7XG5cblxuICAgICAgICBpdChcImV4cGVjdCBjcmVhdGVkQXQgYXMgbnVtYmVyXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KE9iandpdGhDb25mKS50by5oYXZlLnByb3BlcnR5KFwiY3JlYXRlZEF0XCIpLnRoYXQuaXMuYShcIm51bWJlclwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KFwiZXhwZWN0IHVwZGF0ZWRBdCBhcyBudW1iZXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYpLnRvLmhhdmUucHJvcGVydHkoXCJ1cGRhdGVkQXRcIikudGhhdC5pcy5hKFwibnVtYmVyXCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJleHBlY3QgX2lkIGFzIHN0cmluZ1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZikudG8uaGF2ZS5wcm9wZXJ0eShcIl9pZFwiKS50aGF0LmlzLmEoXCJzdHJpbmdcIik7XG4gICAgICAgIH0pO1xuXG5cbiAgICB9KTtcbiAgICBkZXNjcmliZShcImNvcnJpc3BvbmRlbmNlIGZvciBvYmplY3Qgd2l0aCBjbGFzcyBhbmQgc2VyaWFsXCIsIGZ1bmN0aW9uKCkge1xuXG5cbiAgICAgICAgaXQoXCJleHBlY3QgdGhhdCBjbGFzcyBpcyBcIiArIENsYXNzQW5kU2VyaWFsLmNsYXNzLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZikudG8uaGF2ZS5wcm9wZXJ0eShcImNsYXNzXCIpLnRoYXQuZXF1YWwoQ2xhc3NBbmRTZXJpYWwuY2xhc3MpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJleHBlY3QgdGhhdCBzZXJpYWwgaXMgXCIgKyBDbGFzc0FuZFNlcmlhbC5zZXJpYWwsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KE9iandpdGhDb25mKS50by5oYXZlLnByb3BlcnR5KFwic2VyaWFsXCIpLnRoYXQuZXF1YWwoQ2xhc3NBbmRTZXJpYWwuc2VyaWFsKTtcbiAgICAgICAgfSk7XG5cblxuICAgIH0pO1xuICAgIGRlc2NyaWJlKFwiY29tcG9zaXRpb24gb2YgX2lkXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGl0KFwiZXhwZWN0IHRoYXQgX2lkIGlzIGNvbXBvc2VkIG9mIDQgd29yZFwiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgZXhwZWN0KE9iandpdGhDb25mLl9pZC5zcGxpdChcIl9cIikubGVuZ3RoKS50aGF0LmVxdWFsKDQpO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiZXhwZWN0IHRoYXQgZmlyc3Qgd29yZCBvZiBfaWQgaXMgY2xhc3NcIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZi5faWQuc3BsaXQoXCJfXCIpWzBdKS50aGF0LmVxdWFsKENsYXNzQW5kU2VyaWFsLmNsYXNzKTtcblxuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJleHBlY3QgdGhhdCBzZWNvbmQgd29yZCBvZiBfaWQgaXMgc2VyaWFsXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYuX2lkLnNwbGl0KFwiX1wiKVsxXSkudGhhdC5lcXVhbChDbGFzc0FuZFNlcmlhbC5zZXJpYWwpO1xuXG4gICAgICAgIH0pO1xuICAgICAgICBpdChcImV4cGVjdCB0aGF0IHRoaXJkIHdvcmQgb2YgX2lkIGlzIGEgbnVtYmVyIGVxdWFsIHRvIGNyZWF0ZWRBdFwiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgZXhwZWN0KHBhcnNlSW50KE9iandpdGhDb25mLl9pZC5zcGxpdChcIl9cIilbMl0pKS50aGF0LmlzLmEoXCJudW1iZXJcIikudGhhdC5lcXVhbChPYmp3aXRoQ29uZi5jcmVhdGVkQXQpO1xuXG4gICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGl0KFwiZXhwZWN0IGZvdXJ0aCB3b3JkIG9mIF9pZCBpcyBhbiB1aWRcIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZi5faWQuc3BsaXQoXCJfXCIpWzNdKS50aGF0LmlzLmEoXCJzdHJpbmdcIik7XG5cbiAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgIGl0KFwiZXhwZWN0IGZvdXJ0aCB3b3JkIG9mIF9pZCBpcyBhbiB1aWQgb2YgNSBjaGFyYWN0ZXJzXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYuX2lkLnNwbGl0KFwiX1wiKVszXS5sZW5ndGgpLnRoYXQuZXF1YWwoNik7XG5cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cblxuXG5cbn0pOyJdfQ==
