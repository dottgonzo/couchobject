"use strict";
var chai = require("chai");
var expect = chai.expect;
var index_1 = require("../index");
var ClassAndSerial = { serial: "seffesgsrgr", class: "cllgr" };
var ObjwithConf = new index_1.default(ClassAndSerial);
describe("test new object with class and serial", function () {
    describe("basic test existence", function () {
        it("expect no errors", function () {
            expect(ObjwithConf).to.be.ok;
        });
        it("expect an object", function () {
            expect(ObjwithConf).to.be.an("Object");
        });
    });
    describe("properties", function () {
        it("expect createdAt as number", function () {
            expect(ObjwithConf).to.have.property("createdAt").that.is.a("number");
        });
        it("expect updatedAt as number", function () {
            expect(ObjwithConf).to.have.property("updatedAt").that.is.a("number");
        });
        it("expect _id as string", function () {
            expect(ObjwithConf).to.have.property("_id").that.is.a("string");
        });
    });
    describe("corrispondence for object with class and serial", function () {
        it("expect that class is " + ClassAndSerial.class, function () {
            expect(ObjwithConf).to.have.property("class").that.equal(ClassAndSerial.class);
        });
        it("expect that serial is " + ClassAndSerial.serial, function () {
            expect(ObjwithConf).to.have.property("serial").that.equal(ClassAndSerial.serial);
        });
    });
    describe("composition of _id", function () {
        it("expect that _id is composed of 4 word", function () {
            expect(ObjwithConf._id.split("_").length).that.equal(4);
        });
        it("expect that first word of _id is class", function () {
            expect(ObjwithConf._id.split("_")[0]).that.equal(ClassAndSerial.class);
        });
        it("expect that second word of _id is serial", function () {
            expect(ObjwithConf._id.split("_")[1]).that.equal(ClassAndSerial.serial);
        });
        it("expect that third word of _id is a number equal to createdAt", function () {
            expect(parseInt(ObjwithConf._id.split("_")[2])).that.is.a("number").that.equal(ObjwithConf.createdAt);
        });
        it("expect fourth word of _id is an uid", function () {
            expect(ObjwithConf._id.split("_")[3]).that.is.a("string");
        });
        it("expect fourth word of _id is an uid of 5 characters", function () {
            expect(ObjwithConf._id.split("_")[3].length).that.equal(6);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvd2l0aGNsYXNzYW5kc2VyaWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxJQUFZLElBQUksV0FBTSxNQUFNLENBQUMsQ0FBQTtBQUU3QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO0FBRXhCLHNCQUFxQixVQUFVLENBQUMsQ0FBQTtBQUloQyxJQUFNLGNBQWMsR0FBRyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFBO0FBRWhFLElBQU0sV0FBVyxHQUFHLElBQUksZUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBS2pELFFBQVEsQ0FBQyx1Q0FBdUMsRUFBRTtJQUM5QyxRQUFRLENBQUMsc0JBQXNCLEVBQUU7UUFFN0IsRUFBRSxDQUFDLGtCQUFrQixFQUFFO1lBQ25CLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxrQkFBa0IsRUFBRTtZQUNuQixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUNILFFBQVEsQ0FBQyxZQUFZLEVBQUU7UUFHbkIsRUFBRSxDQUFDLDRCQUE0QixFQUFFO1lBQzdCLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyw0QkFBNEIsRUFBRTtZQUM3QixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUUsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsc0JBQXNCLEVBQUU7WUFDdkIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BFLENBQUMsQ0FBQyxDQUFDO0lBR1AsQ0FBQyxDQUFDLENBQUM7SUFDSCxRQUFRLENBQUMsaURBQWlELEVBQUU7UUFHeEQsRUFBRSxDQUFDLHVCQUF1QixHQUFHLGNBQWMsQ0FBQyxLQUFLLEVBQUU7WUFDL0MsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25GLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLHdCQUF3QixHQUFHLGNBQWMsQ0FBQyxNQUFNLEVBQUU7WUFDakQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JGLENBQUMsQ0FBQyxDQUFDO0lBR1AsQ0FBQyxDQUFDLENBQUM7SUFDSCxRQUFRLENBQUMsb0JBQW9CLEVBQUU7UUFFM0IsRUFBRSxDQUFDLHVDQUF1QyxFQUFFO1lBRXhDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTVELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHdDQUF3QyxFQUFFO1lBRXpDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTNFLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLDBDQUEwQyxFQUFFO1lBRTNDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTVFLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLDhEQUE4RCxFQUFFO1lBRS9ELE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTFHLENBQUMsQ0FBQyxDQUFDO1FBQ0ssRUFBRSxDQUFDLHFDQUFxQyxFQUFFO1lBRTlDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTlELENBQUMsQ0FBQyxDQUFDO1FBQ1ksRUFBRSxDQUFDLHFEQUFxRCxFQUFFO1lBRXJFLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRS9ELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFLUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3dpdGhjbGFzc2FuZHNlcmlhbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0ICogYXMgbW9jaGEgZnJvbSBcIm1vY2hhXCI7XG5pbXBvcnQgKiBhcyBjaGFpIGZyb20gXCJjaGFpXCI7XG5cbmxldCBleHBlY3QgPSBjaGFpLmV4cGVjdFxuXG5pbXBvcnQgQ291Y2hPYmogZnJvbSBcIi4uL2luZGV4XCI7XG5cblxuXG5jb25zdCBDbGFzc0FuZFNlcmlhbCA9IHsgc2VyaWFsOiBcInNlZmZlc2dzcmdyXCIsIGNsYXNzOiBcImNsbGdyXCIgfVxuXG5jb25zdCBPYmp3aXRoQ29uZiA9IG5ldyBDb3VjaE9iaihDbGFzc0FuZFNlcmlhbCk7XG5cblxuXG5cbmRlc2NyaWJlKFwidGVzdCBuZXcgb2JqZWN0IHdpdGggY2xhc3MgYW5kIHNlcmlhbFwiLCBmdW5jdGlvbigpIHtcbiAgICBkZXNjcmliZShcImJhc2ljIHRlc3QgZXhpc3RlbmNlXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGl0KFwiZXhwZWN0IG5vIGVycm9yc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZikudG8uYmUub2s7XG4gICAgICAgIH0pO1xuICAgICAgICBpdChcImV4cGVjdCBhbiBvYmplY3RcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYpLnRvLmJlLmFuKFwiT2JqZWN0XCIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZShcInByb3BlcnRpZXNcIiwgZnVuY3Rpb24oKSB7XG5cblxuICAgICAgICBpdChcImV4cGVjdCBjcmVhdGVkQXQgYXMgbnVtYmVyXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KE9iandpdGhDb25mKS50by5oYXZlLnByb3BlcnR5KFwiY3JlYXRlZEF0XCIpLnRoYXQuaXMuYShcIm51bWJlclwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KFwiZXhwZWN0IHVwZGF0ZWRBdCBhcyBudW1iZXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYpLnRvLmhhdmUucHJvcGVydHkoXCJ1cGRhdGVkQXRcIikudGhhdC5pcy5hKFwibnVtYmVyXCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJleHBlY3QgX2lkIGFzIHN0cmluZ1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZikudG8uaGF2ZS5wcm9wZXJ0eShcIl9pZFwiKS50aGF0LmlzLmEoXCJzdHJpbmdcIik7XG4gICAgICAgIH0pO1xuXG5cbiAgICB9KTtcbiAgICBkZXNjcmliZShcImNvcnJpc3BvbmRlbmNlIGZvciBvYmplY3Qgd2l0aCBjbGFzcyBhbmQgc2VyaWFsXCIsIGZ1bmN0aW9uKCkge1xuXG5cbiAgICAgICAgaXQoXCJleHBlY3QgdGhhdCBjbGFzcyBpcyBcIiArIENsYXNzQW5kU2VyaWFsLmNsYXNzLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZikudG8uaGF2ZS5wcm9wZXJ0eShcImNsYXNzXCIpLnRoYXQuZXF1YWwoQ2xhc3NBbmRTZXJpYWwuY2xhc3MpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJleHBlY3QgdGhhdCBzZXJpYWwgaXMgXCIgKyBDbGFzc0FuZFNlcmlhbC5zZXJpYWwsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KE9iandpdGhDb25mKS50by5oYXZlLnByb3BlcnR5KFwic2VyaWFsXCIpLnRoYXQuZXF1YWwoQ2xhc3NBbmRTZXJpYWwuc2VyaWFsKTtcbiAgICAgICAgfSk7XG5cblxuICAgIH0pO1xuICAgIGRlc2NyaWJlKFwiY29tcG9zaXRpb24gb2YgX2lkXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGl0KFwiZXhwZWN0IHRoYXQgX2lkIGlzIGNvbXBvc2VkIG9mIDQgd29yZFwiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgZXhwZWN0KE9iandpdGhDb25mLl9pZC5zcGxpdChcIl9cIikubGVuZ3RoKS50aGF0LmVxdWFsKDQpO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiZXhwZWN0IHRoYXQgZmlyc3Qgd29yZCBvZiBfaWQgaXMgY2xhc3NcIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZi5faWQuc3BsaXQoXCJfXCIpWzBdKS50aGF0LmVxdWFsKENsYXNzQW5kU2VyaWFsLmNsYXNzKTtcblxuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJleHBlY3QgdGhhdCBzZWNvbmQgd29yZCBvZiBfaWQgaXMgc2VyaWFsXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYuX2lkLnNwbGl0KFwiX1wiKVsxXSkudGhhdC5lcXVhbChDbGFzc0FuZFNlcmlhbC5zZXJpYWwpO1xuXG4gICAgICAgIH0pO1xuICAgICAgICBpdChcImV4cGVjdCB0aGF0IHRoaXJkIHdvcmQgb2YgX2lkIGlzIGEgbnVtYmVyIGVxdWFsIHRvIGNyZWF0ZWRBdFwiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgZXhwZWN0KHBhcnNlSW50KE9iandpdGhDb25mLl9pZC5zcGxpdChcIl9cIilbMl0pKS50aGF0LmlzLmEoXCJudW1iZXJcIikudGhhdC5lcXVhbChPYmp3aXRoQ29uZi5jcmVhdGVkQXQpO1xuXG4gICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGl0KFwiZXhwZWN0IGZvdXJ0aCB3b3JkIG9mIF9pZCBpcyBhbiB1aWRcIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZi5faWQuc3BsaXQoXCJfXCIpWzNdKS50aGF0LmlzLmEoXCJzdHJpbmdcIik7XG5cbiAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgIGl0KFwiZXhwZWN0IGZvdXJ0aCB3b3JkIG9mIF9pZCBpcyBhbiB1aWQgb2YgNSBjaGFyYWN0ZXJzXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYuX2lkLnNwbGl0KFwiX1wiKVszXS5sZW5ndGgpLnRoYXQuZXF1YWwoNik7XG5cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cblxuXG5cbn0pOyJdfQ==
