"use strict";
var chai = require("chai");
var expect = chai.expect;
var CouchObj = require("../index");
var ClassAndSerial = { _serial: "seffesgsrgr", _class: "cllgr" };
var ObjwithConf = new CouchObj(ClassAndSerial);
describe("test new object with class and serial", function () {
    describe("basic test existence", function () {
        it("expect no errors", function () {
            expect(ObjwithConf).to.be.ok;
        });
        it("expect an object", function () {
            expect(ObjwithConf).to.be.an("Object");
        });
    });
    describe("properties", function () {
        it("expect _createdAt as number", function () {
            expect(ObjwithConf).to.have.property("_createdAt").that.is.a("number");
        });
        it("expect _updatedAt as number", function () {
            expect(ObjwithConf).to.have.property("_updatedAt").that.is.a("number");
        });
        it("expect _id as string", function () {
            expect(ObjwithConf).to.have.property("_id").that.is.a("string");
        });
    });
    describe("corrispondence for object with class and serial", function () {
        it("expect that _class is " + ClassAndSerial._class, function () {
            expect(ObjwithConf).to.have.property("_class").that.equal(ClassAndSerial._class);
        });
        it("expect that _serial is " + ClassAndSerial._serial, function () {
            expect(ObjwithConf).to.have.property("_serial").that.equal(ClassAndSerial._serial);
        });
    });
    describe("composition of _id", function () {
        it("expect that _id is composed of 4 word", function () {
            expect(ObjwithConf._id.split("_").length).that.equal(4);
        });
        it("expect that first word of _id is _class", function () {
            expect(ObjwithConf._id.split("_")[0]).that.equal(ClassAndSerial._class);
        });
        it("expect that second word of _id is _serial", function () {
            expect(ObjwithConf._id.split("_")[1]).that.equal(ClassAndSerial._serial);
        });
        it("expect that third word of _id is a number equal to _createdAt", function () {
            expect(parseInt(ObjwithConf._id.split("_")[2])).that.is.a("number").that.equal(ObjwithConf._createdAt);
        });
        it("expect fourth word of _id is an uid", function () {
            expect(ObjwithConf._id.split("_")[3]).that.is.a("string");
        });
        it("expect fourth word of _id is an uid of 5 characters", function () {
            expect(ObjwithConf._id.split("_")[3].length).that.equal(5);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvd2l0aGNsYXNzYW5kc2VyaWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxJQUFZLElBQUksV0FBTSxNQUFNLENBQUMsQ0FBQTtBQUU3QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO0FBRXhCLElBQU8sUUFBUSxXQUFXLFVBQVUsQ0FBQyxDQUFDO0FBT3RDLElBQUksY0FBYyxHQUFHLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUE7QUFFaEUsSUFBSSxXQUFXLEdBQUcsSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7QUFLL0MsUUFBUSxDQUFDLHVDQUF1QyxFQUFFO0lBQzlDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRTtRQUU3QixFQUFFLENBQUMsa0JBQWtCLEVBQUU7WUFDbkIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLGtCQUFrQixFQUFFO1lBQ25CLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ0gsUUFBUSxDQUFDLFlBQVksRUFBRTtRQUduQixFQUFFLENBQUMsNkJBQTZCLEVBQUU7WUFDOUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNFLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLDZCQUE2QixFQUFFO1lBQzlCLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzRSxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxzQkFBc0IsRUFBRTtZQUN2QixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEUsQ0FBQyxDQUFDLENBQUM7SUFHUCxDQUFDLENBQUMsQ0FBQztJQUNILFFBQVEsQ0FBQyxpREFBaUQsRUFBRTtRQUd4RCxFQUFFLENBQUMsd0JBQXdCLEdBQUcsY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUNqRCxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckYsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMseUJBQXlCLEdBQUcsY0FBYyxDQUFDLE9BQU8sRUFBRTtZQUNuRCxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkYsQ0FBQyxDQUFDLENBQUM7SUFHUCxDQUFDLENBQUMsQ0FBQztJQUNILFFBQVEsQ0FBQyxvQkFBb0IsRUFBRTtRQUUzQixFQUFFLENBQUMsdUNBQXVDLEVBQUU7WUFFeEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFNUQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMseUNBQXlDLEVBQUU7WUFFMUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFNUUsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsMkNBQTJDLEVBQUU7WUFFNUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFN0UsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsK0RBQStELEVBQUU7WUFFaEUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFM0csQ0FBQyxDQUFDLENBQUM7UUFDSyxFQUFFLENBQUMscUNBQXFDLEVBQUU7WUFFOUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFOUQsQ0FBQyxDQUFDLENBQUM7UUFDWSxFQUFFLENBQUMscURBQXFELEVBQUU7WUFFckUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFL0QsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUtQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3Qvd2l0aGNsYXNzYW5kc2VyaWFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgKiBhcyBtb2NoYSBmcm9tIFwibW9jaGFcIjtcbmltcG9ydCAqIGFzIGNoYWkgZnJvbSBcImNoYWlcIjtcblxubGV0IGV4cGVjdCA9IGNoYWkuZXhwZWN0XG5cbmltcG9ydCBDb3VjaE9iaiA9IHJlcXVpcmUoXCIuLi9pbmRleFwiKTtcblxuXG5cblxuXG5cbmxldCBDbGFzc0FuZFNlcmlhbCA9IHsgX3NlcmlhbDogXCJzZWZmZXNnc3JnclwiLCBfY2xhc3M6IFwiY2xsZ3JcIiB9XG5cbmxldCBPYmp3aXRoQ29uZiA9IG5ldyBDb3VjaE9iaihDbGFzc0FuZFNlcmlhbCk7XG5cblxuXG5cbmRlc2NyaWJlKFwidGVzdCBuZXcgb2JqZWN0IHdpdGggY2xhc3MgYW5kIHNlcmlhbFwiLCBmdW5jdGlvbigpIHtcbiAgICBkZXNjcmliZShcImJhc2ljIHRlc3QgZXhpc3RlbmNlXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGl0KFwiZXhwZWN0IG5vIGVycm9yc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZikudG8uYmUub2s7XG4gICAgICAgIH0pO1xuICAgICAgICBpdChcImV4cGVjdCBhbiBvYmplY3RcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYpLnRvLmJlLmFuKFwiT2JqZWN0XCIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZShcInByb3BlcnRpZXNcIiwgZnVuY3Rpb24oKSB7XG5cblxuICAgICAgICBpdChcImV4cGVjdCBfY3JlYXRlZEF0IGFzIG51bWJlclwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZikudG8uaGF2ZS5wcm9wZXJ0eShcIl9jcmVhdGVkQXRcIikudGhhdC5pcy5hKFwibnVtYmVyXCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJleHBlY3QgX3VwZGF0ZWRBdCBhcyBudW1iZXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYpLnRvLmhhdmUucHJvcGVydHkoXCJfdXBkYXRlZEF0XCIpLnRoYXQuaXMuYShcIm51bWJlclwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KFwiZXhwZWN0IF9pZCBhcyBzdHJpbmdcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYpLnRvLmhhdmUucHJvcGVydHkoXCJfaWRcIikudGhhdC5pcy5hKFwic3RyaW5nXCIpO1xuICAgICAgICB9KTtcblxuXG4gICAgfSk7XG4gICAgZGVzY3JpYmUoXCJjb3JyaXNwb25kZW5jZSBmb3Igb2JqZWN0IHdpdGggY2xhc3MgYW5kIHNlcmlhbFwiLCBmdW5jdGlvbigpIHtcblxuXG4gICAgICAgIGl0KFwiZXhwZWN0IHRoYXQgX2NsYXNzIGlzIFwiICsgQ2xhc3NBbmRTZXJpYWwuX2NsYXNzLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZikudG8uaGF2ZS5wcm9wZXJ0eShcIl9jbGFzc1wiKS50aGF0LmVxdWFsKENsYXNzQW5kU2VyaWFsLl9jbGFzcyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdChcImV4cGVjdCB0aGF0IF9zZXJpYWwgaXMgXCIgKyBDbGFzc0FuZFNlcmlhbC5fc2VyaWFsLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZikudG8uaGF2ZS5wcm9wZXJ0eShcIl9zZXJpYWxcIikudGhhdC5lcXVhbChDbGFzc0FuZFNlcmlhbC5fc2VyaWFsKTtcbiAgICAgICAgfSk7XG5cblxuICAgIH0pO1xuICAgIGRlc2NyaWJlKFwiY29tcG9zaXRpb24gb2YgX2lkXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGl0KFwiZXhwZWN0IHRoYXQgX2lkIGlzIGNvbXBvc2VkIG9mIDQgd29yZFwiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgZXhwZWN0KE9iandpdGhDb25mLl9pZC5zcGxpdChcIl9cIikubGVuZ3RoKS50aGF0LmVxdWFsKDQpO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiZXhwZWN0IHRoYXQgZmlyc3Qgd29yZCBvZiBfaWQgaXMgX2NsYXNzXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYuX2lkLnNwbGl0KFwiX1wiKVswXSkudGhhdC5lcXVhbChDbGFzc0FuZFNlcmlhbC5fY2xhc3MpO1xuXG4gICAgICAgIH0pO1xuICAgICAgICBpdChcImV4cGVjdCB0aGF0IHNlY29uZCB3b3JkIG9mIF9pZCBpcyBfc2VyaWFsXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYuX2lkLnNwbGl0KFwiX1wiKVsxXSkudGhhdC5lcXVhbChDbGFzc0FuZFNlcmlhbC5fc2VyaWFsKTtcblxuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJleHBlY3QgdGhhdCB0aGlyZCB3b3JkIG9mIF9pZCBpcyBhIG51bWJlciBlcXVhbCB0byBfY3JlYXRlZEF0XCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBleHBlY3QocGFyc2VJbnQoT2Jqd2l0aENvbmYuX2lkLnNwbGl0KFwiX1wiKVsyXSkpLnRoYXQuaXMuYShcIm51bWJlclwiKS50aGF0LmVxdWFsKE9iandpdGhDb25mLl9jcmVhdGVkQXQpO1xuXG4gICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGl0KFwiZXhwZWN0IGZvdXJ0aCB3b3JkIG9mIF9pZCBpcyBhbiB1aWRcIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIGV4cGVjdChPYmp3aXRoQ29uZi5faWQuc3BsaXQoXCJfXCIpWzNdKS50aGF0LmlzLmEoXCJzdHJpbmdcIik7XG5cbiAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgIGl0KFwiZXhwZWN0IGZvdXJ0aCB3b3JkIG9mIF9pZCBpcyBhbiB1aWQgb2YgNSBjaGFyYWN0ZXJzXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBleHBlY3QoT2Jqd2l0aENvbmYuX2lkLnNwbGl0KFwiX1wiKVszXS5sZW5ndGgpLnRoYXQuZXF1YWwoNSk7XG5cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cblxuXG5cbn0pOyJdfQ==
