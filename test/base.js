"use strict";
var chai = require("chai");
var expect = chai.expect;
var CouchObj = require("../index");
var Obj = new CouchObj();
describe("test new object with no conf", function () {
    describe("basic test existence", function () {
        it("expect no errors", function () {
            expect(Obj).to.be.ok;
        });
        it("expect an object", function () {
            expect(Obj).to.be.an("Object");
        });
    });
    describe("properties", function () {
        it("expect _createdAt as number", function () {
            expect(Obj).to.have.property("_createdAt").that.is.a("number");
        });
        it("expect _updatedAt as number equal to _createdAt", function () {
            expect(Obj).to.have.property("_updatedAt").that.is.a("number");
        });
        it("expect _id as string", function () {
            expect(Obj).to.have.property("_id").that.is.a("string");
        });
    });
    describe("composition of _id", function () {
        it("expect that _id is composed of 4 word", function () {
            expect(Obj._id.split("_").length).that.equal(4);
        });
        it("expect that first word of _id is _class data", function () {
            expect(Obj._id.split("_")[0]).that.equal("data");
        });
        it("expect that second word of _id is _serial 00000", function () {
            expect(Obj._id.split("_")[1]).that.equal("00000");
        });
        it("expect that third word of _id is a number equal to _createdAt", function () {
            expect(parseInt(Obj._id.split("_")[2])).that.is.a("number").that.equal(Obj._createdAt);
        });
        it("expect fourth word of _id is an uid", function () {
            expect(Obj._id.split("_")[3]).that.is.a("string");
        });
        it("expect fourth word of _id is an uid of 5 characters", function () {
            expect(Obj._id.split("_")[3].length).that.equal(5);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsSUFBWSxJQUFJLFdBQU0sTUFBTSxDQUFDLENBQUE7QUFFN0IsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtBQUV4QixJQUFPLFFBQVEsV0FBVyxVQUFVLENBQUMsQ0FBQztBQUV0QyxJQUFJLEdBQUcsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0FBSXpCLFFBQVEsQ0FBQyw4QkFBOEIsRUFBRTtJQUNyQyxRQUFRLENBQUMsc0JBQXNCLEVBQUU7UUFFN0IsRUFBRSxDQUFDLGtCQUFrQixFQUFFO1lBQ25CLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxrQkFBa0IsRUFBRTtZQUNuQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUNILFFBQVEsQ0FBQyxZQUFZLEVBQUU7UUFHbkIsRUFBRSxDQUFDLDZCQUE2QixFQUFFO1lBQzlCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRSxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxpREFBaUQsRUFBRTtZQUNsRCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkUsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsc0JBQXNCLEVBQUU7WUFDdkIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFQyxRQUFRLENBQUMsb0JBQW9CLEVBQUU7UUFFL0IsRUFBRSxDQUFDLHVDQUF1QyxFQUFFO1lBRXhDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXBELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDhDQUE4QyxFQUFFO1lBRS9DLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFckQsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsaURBQWlELEVBQUU7WUFFbEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV0RCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQywrREFBK0QsRUFBRTtZQUVoRSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUUzRixDQUFDLENBQUMsQ0FBQztRQUNLLEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRTtZQUU5QyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV0RCxDQUFDLENBQUMsQ0FBQztRQUNZLEVBQUUsQ0FBQyxxREFBcUQsRUFBRTtZQUVyRSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV2RCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBR1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9iYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbW9jaGEgZnJvbSBcIm1vY2hhXCI7XG5pbXBvcnQgKiBhcyBjaGFpIGZyb20gXCJjaGFpXCI7XG5cbmxldCBleHBlY3QgPSBjaGFpLmV4cGVjdFxuXG5pbXBvcnQgQ291Y2hPYmogPSByZXF1aXJlKFwiLi4vaW5kZXhcIik7XG5cbmxldCBPYmogPSBuZXcgQ291Y2hPYmooKTtcblxuXG5cbmRlc2NyaWJlKFwidGVzdCBuZXcgb2JqZWN0IHdpdGggbm8gY29uZlwiLCBmdW5jdGlvbigpIHtcbiAgICBkZXNjcmliZShcImJhc2ljIHRlc3QgZXhpc3RlbmNlXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGl0KFwiZXhwZWN0IG5vIGVycm9yc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmopLnRvLmJlLm9rO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJleHBlY3QgYW4gb2JqZWN0XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KE9iaikudG8uYmUuYW4oXCJPYmplY3RcIik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKFwicHJvcGVydGllc1wiLCBmdW5jdGlvbigpIHtcblxuXG4gICAgICAgIGl0KFwiZXhwZWN0IF9jcmVhdGVkQXQgYXMgbnVtYmVyXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KE9iaikudG8uaGF2ZS5wcm9wZXJ0eShcIl9jcmVhdGVkQXRcIikudGhhdC5pcy5hKFwibnVtYmVyXCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJleHBlY3QgX3VwZGF0ZWRBdCBhcyBudW1iZXIgZXF1YWwgdG8gX2NyZWF0ZWRBdFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmopLnRvLmhhdmUucHJvcGVydHkoXCJfdXBkYXRlZEF0XCIpLnRoYXQuaXMuYShcIm51bWJlclwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KFwiZXhwZWN0IF9pZCBhcyBzdHJpbmdcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QoT2JqKS50by5oYXZlLnByb3BlcnR5KFwiX2lkXCIpLnRoYXQuaXMuYShcInN0cmluZ1wiKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgXG4gICAgICAgIGRlc2NyaWJlKFwiY29tcG9zaXRpb24gb2YgX2lkXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGl0KFwiZXhwZWN0IHRoYXQgX2lkIGlzIGNvbXBvc2VkIG9mIDQgd29yZFwiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgZXhwZWN0KE9iai5faWQuc3BsaXQoXCJfXCIpLmxlbmd0aCkudGhhdC5lcXVhbCg0KTtcblxuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImV4cGVjdCB0aGF0IGZpcnN0IHdvcmQgb2YgX2lkIGlzIF9jbGFzcyBkYXRhXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBleHBlY3QoT2JqLl9pZC5zcGxpdChcIl9cIilbMF0pLnRoYXQuZXF1YWwoXCJkYXRhXCIpO1xuXG4gICAgICAgIH0pO1xuICAgICAgICBpdChcImV4cGVjdCB0aGF0IHNlY29uZCB3b3JkIG9mIF9pZCBpcyBfc2VyaWFsIDAwMDAwXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBleHBlY3QoT2JqLl9pZC5zcGxpdChcIl9cIilbMV0pLnRoYXQuZXF1YWwoXCIwMDAwMFwiKTtcblxuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJleHBlY3QgdGhhdCB0aGlyZCB3b3JkIG9mIF9pZCBpcyBhIG51bWJlciBlcXVhbCB0byBfY3JlYXRlZEF0XCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBleHBlY3QocGFyc2VJbnQoT2JqLl9pZC5zcGxpdChcIl9cIilbMl0pKS50aGF0LmlzLmEoXCJudW1iZXJcIikudGhhdC5lcXVhbChPYmouX2NyZWF0ZWRBdCk7XG5cbiAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaXQoXCJleHBlY3QgZm91cnRoIHdvcmQgb2YgX2lkIGlzIGFuIHVpZFwiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgZXhwZWN0KE9iai5faWQuc3BsaXQoXCJfXCIpWzNdKS50aGF0LmlzLmEoXCJzdHJpbmdcIik7XG5cbiAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgIGl0KFwiZXhwZWN0IGZvdXJ0aCB3b3JkIG9mIF9pZCBpcyBhbiB1aWQgb2YgNSBjaGFyYWN0ZXJzXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBleHBlY3QoT2JqLl9pZC5zcGxpdChcIl9cIilbM10ubGVuZ3RoKS50aGF0LmVxdWFsKDUpO1xuXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgXG59KTtcblxuXG4iXX0=
