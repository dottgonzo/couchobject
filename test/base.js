"use strict";
const chai = require("chai");
const expect = chai.expect;
const index_1 = require("../index");
const Obj = index_1.default();
describe("test new object with no conf", function () {
    describe("basic test existence", function () {
        it("expect no errors", function () {
            expect(Obj).to.be.ok;
        });
        it("expect an object", function () {
            expect(Obj).to.be.an("Object");
        });
    });
    describe("properties", function () {
        it("expect createdAt as number", function () {
            expect(Obj).to.have.property("createdAt").that.is.a("number");
        });
        it("expect updatedAt as number equal to createdAt", function () {
            expect(Obj).to.have.property("updatedAt").that.is.a("number");
        });
        it("expect _id as string", function () {
            expect(Obj).to.have.property("_id").that.is.a("string");
        });
    });
    describe("composition of _id", function () {
        it("expect that _id is composed of 4 word", function () {
            expect(Obj._id.split("_").length).that.equal(4);
        });
        it("expect that first word of _id is class data", function () {
            expect(Obj._id.split("_")[0]).that.equal("data");
        });
        it("expect that second word of _id is serial 00000", function () {
            expect(Obj._id.split("_")[1]).that.equal("00000");
        });
        it("expect that third word of _id is a number equal to createdAt", function () {
            expect(parseInt(Obj._id.split("_")[2])).that.is.a("number").that.equal(Obj.createdAt);
        });
        it("expect fourth word of _id is an uid", function () {
            expect(Obj._id.split("_")[3]).that.is.a("string");
        });
        it("expect fourth word of _id is an uid of 5 characters", function () {
            expect(Obj._id.split("_")[3].length).that.equal(6);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsQ0FBQyxDQUFDO1FBQ0ssRUFBRSxDQUFDLHFDQUFxQyxFQUFFO1lBRTlDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXRELENBQUMsQ0FBQyxDQUFDO1FBQ1ksRUFBRSxDQUFDLHFEQUFxRCxFQUFFO1lBRXJFLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXZELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFHUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2Jhc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBtb2NoYSBmcm9tIFwibW9jaGFcIjtcbmltcG9ydCAqIGFzIGNoYWkgZnJvbSBcImNoYWlcIjtcblxuXG5jb25zdCBleHBlY3QgPSBjaGFpLmV4cGVjdFxuXG5pbXBvcnQgQ291Y2hPYmogZnJvbSBcIi4uL2luZGV4XCI7XG5cbmNvbnN0IE9iaiA9IENvdWNoT2JqKCk7XG5cblxuXG5kZXNjcmliZShcInRlc3QgbmV3IG9iamVjdCB3aXRoIG5vIGNvbmZcIiwgZnVuY3Rpb24oKSB7XG4gICAgZGVzY3JpYmUoXCJiYXNpYyB0ZXN0IGV4aXN0ZW5jZVwiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICBpdChcImV4cGVjdCBubyBlcnJvcnNcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QoT2JqKS50by5iZS5vaztcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KFwiZXhwZWN0IGFuIG9iamVjdFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmopLnRvLmJlLmFuKFwiT2JqZWN0XCIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZShcInByb3BlcnRpZXNcIiwgZnVuY3Rpb24oKSB7XG5cblxuICAgICAgICBpdChcImV4cGVjdCBjcmVhdGVkQXQgYXMgbnVtYmVyXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KE9iaikudG8uaGF2ZS5wcm9wZXJ0eShcImNyZWF0ZWRBdFwiKS50aGF0LmlzLmEoXCJudW1iZXJcIik7XG4gICAgICAgIH0pO1xuICAgICAgICBpdChcImV4cGVjdCB1cGRhdGVkQXQgYXMgbnVtYmVyIGVxdWFsIHRvIGNyZWF0ZWRBdFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmopLnRvLmhhdmUucHJvcGVydHkoXCJ1cGRhdGVkQXRcIikudGhhdC5pcy5hKFwibnVtYmVyXCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJleHBlY3QgX2lkIGFzIHN0cmluZ1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChPYmopLnRvLmhhdmUucHJvcGVydHkoXCJfaWRcIikudGhhdC5pcy5hKFwic3RyaW5nXCIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBcbiAgICAgICAgZGVzY3JpYmUoXCJjb21wb3NpdGlvbiBvZiBfaWRcIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgaXQoXCJleHBlY3QgdGhhdCBfaWQgaXMgY29tcG9zZWQgb2YgNCB3b3JkXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBleHBlY3QoT2JqLl9pZC5zcGxpdChcIl9cIikubGVuZ3RoKS50aGF0LmVxdWFsKDQpO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiZXhwZWN0IHRoYXQgZmlyc3Qgd29yZCBvZiBfaWQgaXMgY2xhc3MgZGF0YVwiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgZXhwZWN0KE9iai5faWQuc3BsaXQoXCJfXCIpWzBdKS50aGF0LmVxdWFsKFwiZGF0YVwiKTtcblxuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJleHBlY3QgdGhhdCBzZWNvbmQgd29yZCBvZiBfaWQgaXMgc2VyaWFsIDAwMDAwXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBleHBlY3QoT2JqLl9pZC5zcGxpdChcIl9cIilbMV0pLnRoYXQuZXF1YWwoXCIwMDAwMFwiKTtcblxuICAgICAgICB9KTtcbiAgICAgICAgaXQoXCJleHBlY3QgdGhhdCB0aGlyZCB3b3JkIG9mIF9pZCBpcyBhIG51bWJlciBlcXVhbCB0byBjcmVhdGVkQXRcIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIGV4cGVjdChwYXJzZUludChPYmouX2lkLnNwbGl0KFwiX1wiKVsyXSkpLnRoYXQuaXMuYShcIm51bWJlclwiKS50aGF0LmVxdWFsKE9iai5jcmVhdGVkQXQpO1xuXG4gICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGl0KFwiZXhwZWN0IGZvdXJ0aCB3b3JkIG9mIF9pZCBpcyBhbiB1aWRcIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIGV4cGVjdChPYmouX2lkLnNwbGl0KFwiX1wiKVszXSkudGhhdC5pcy5hKFwic3RyaW5nXCIpO1xuXG4gICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICBpdChcImV4cGVjdCBmb3VydGggd29yZCBvZiBfaWQgaXMgYW4gdWlkIG9mIDUgY2hhcmFjdGVyc1wiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgZXhwZWN0KE9iai5faWQuc3BsaXQoXCJfXCIpWzNdLmxlbmd0aCkudGhhdC5lcXVhbCg2KTtcblxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIFxufSk7XG5cblxuIl19
